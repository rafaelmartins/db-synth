#!/usr/bin/env python3
'''
db-synth: A MIDI-controlled mono-voice digital synthesizer built on top of the
          AVR DB microcontroller series.

SPDX-FileCopyrightText: 2022 Rafael G. Martins <rafael@rafaelmartins.eng.br>
SPDX-License-Identifier: BSD-3-Clause
'''

import itertools
import math
import os

waveform_amplitude = 0x1ff
waveform_samples_per_cycle = 0x200

a4_midi_number = 69
a4_frequency = 440.0

audio_sample_rate = 48000

note_frequencies = [a4_frequency * 2 ** ((i - a4_midi_number) / 12)
                    for i in range(128)]


'''
Bandlimited wavetables

References:
    - Tim Stilson and Julius Smith. 1996. Alias-Free Digital Synthesis of Classic
      Analog Waveforms (https://ccrma.stanford.edu/~stilti/papers/blit.pdf)
'''

# the octave closer to the nyquist frequency is usually a sine, then we reuse
# the existing sine wavetable.
wavetable_octaves = math.ceil(len(note_frequencies) / 12) - 1


def fix_wavetable(array):
    mn = min(array)
    mx = max(array)

    for i in range(len(array)):
        array[i] -= mn
        array[i] *= (2 * waveform_amplitude) / abs(mx - mn)
        array[i] = int(array[i]) - waveform_amplitude

    return array[::-1]


wavetables = {
    'sine': [waveform_amplitude * math.sin(2 * math.pi * i / waveform_samples_per_cycle)
             for i in range(waveform_samples_per_cycle)],
    'sawtooth': [],
    'square': [],
    'triangle': [],
}

for i in range(wavetable_octaves):
    idx = i * 12 + 11
    f = note_frequencies[idx if idx < len(note_frequencies)
                         else len(note_frequencies) - 1]

    P = audio_sample_rate / f
    M = 2 * math.floor(P / 2) + 1

    mid = 0
    blit = []
    for i in range(waveform_samples_per_cycle):
        x = (i - waveform_samples_per_cycle / 2) / waveform_samples_per_cycle
        try:
            blit.append(math.sin(math.pi * x * M) / (M * math.sin(math.pi * x)))
        except ZeroDivisionError:
            mid = i
            blit.append(1.0)
    blit_avg = min(blit) + ((max(blit) - min(blit)) / 2)

    y = 0
    square = []
    for i in range(len(blit)):
        y += blit[i] - blit[i + mid if i < mid else i - mid]
        square.append(y)
    square_avg = min(square) + ((max(square) - min(square)) / 2)
    wavetables['square'].append(fix_wavetable(square))

    y = 0
    triangle = []
    for v in square:
        y += v - square_avg
        triangle.append(y)
    triangle_start = waveform_samples_per_cycle // 4
    triangle = triangle[triangle_start:] + triangle[:triangle_start]
    wavetables['triangle'].append(fix_wavetable(triangle))

    y = 0
    sawtooth = []
    for i in range(len(blit)):
        y += blit[i + mid if i < mid else i - mid] - 1. / P
        sawtooth.append(-y)
    wavetables['sawtooth'].append(fix_wavetable(sawtooth))


'''
ADSR envelope
'''
adsr_amplitude = 0xff
adsr_samples_per_cycle = waveform_samples_per_cycle

# we try to emulate the curves from AS3310.
# this is from page 2 of datasheet.
adsr_attack_asymptote_voltage = 7.0
adsr_attack_peak_voltage = 5.0

# time input data also based on AS3310 as much as possible.
adsr_times_len = 0x100
adsr_times_min_ms = 2
adsr_times_max_ms = 20000

adsr_t = [i / (adsr_samples_per_cycle - 1) for i in range(adsr_samples_per_cycle)]
adsr_full_curve = [1 - math.exp(-3 * i) for i in adsr_t]

adsr_attack_max = 0
for i, v in enumerate(adsr_full_curve):
    if v / adsr_full_curve[-1] >= adsr_attack_peak_voltage / adsr_attack_asymptote_voltage:
        adsr_attack_max = adsr_t[i]
        break

adsr_attack_curve = [1 - math.exp(-3 * i * adsr_attack_max) for i in adsr_t]
adsr_attack_curve = [int(adsr_amplitude * i / adsr_attack_curve[-1]) for i in adsr_attack_curve]

adsr_decay_release_curve = [int(adsr_amplitude * i / adsr_full_curve[-1]) for i in adsr_full_curve]

adsr_curves = {
    'attack': adsr_attack_curve,
    'decay_release': adsr_decay_release_curve,
}

adsr_times_end = adsr_times_max_ms - adsr_times_min_ms

adsr_times = [-1 + math.exp(6 * i / (adsr_times_len - 1)) for i in range(adsr_times_len)]
adsr_times = [adsr_times_min_ms + int(adsr_times_end * i / adsr_times[-1]) for i in adsr_times]


'''
Pre-rendered OLED font for SSD1306
'''
oled_font_width = 5
oled_font_height = 7
oled_screen_width = 128
oled_screen_height = 68
oled_chars_per_line = oled_screen_width // (oled_font_width + 1)
oled_lines = oled_screen_height // 8  # info from ssd1306 datasheet

# for font license details, please check the `header_oled_font` function or the generated `oled-font.h` file.
oled_font_data = [
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x70, 0xF8, 0xA8, 0xF8, 0xD8, 0x88, 0x70],
    [0x70, 0xF8, 0xA8, 0xF8, 0x88, 0xD8, 0x70],
    [0x00, 0x50, 0xF8, 0xF8, 0xF8, 0x70, 0x20],
    [0x00, 0x20, 0x70, 0xF8, 0xF8, 0x70, 0x20],
    [0x70, 0x50, 0xF8, 0xA8, 0xF8, 0x20, 0x70],
    [0x20, 0x70, 0xF8, 0xF8, 0xF8, 0x20, 0x70],
    [0x00, 0x00, 0x20, 0x70, 0x70, 0x20, 0x00],
    [0xF8, 0xF8, 0xD8, 0x88, 0x88, 0xD8, 0xF8],
    [0x00, 0x00, 0x20, 0x50, 0x50, 0x20, 0x00],
    [0xF8, 0xF8, 0xD8, 0xA8, 0xA8, 0xD8, 0xF8],
    [0x00, 0x38, 0x18, 0x68, 0xA0, 0xA0, 0x40],
    [0x70, 0x88, 0x88, 0x70, 0x20, 0xF8, 0x20],
    [0x78, 0x48, 0x78, 0x40, 0x40, 0x40, 0xC0],
    [0x78, 0x48, 0x78, 0x48, 0x48, 0x58, 0xC0],
    [0x20, 0xA8, 0x70, 0xD8, 0xD8, 0x70, 0xA8],
    [0x80, 0xC0, 0xF0, 0xF8, 0xF0, 0xC0, 0x80],
    [0x08, 0x18, 0x78, 0xF8, 0x78, 0x18, 0x08],
    [0x20, 0x70, 0xA8, 0x20, 0xA8, 0x70, 0x20],
    [0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0x00, 0xD8],
    [0x78, 0xA8, 0xA8, 0x68, 0x28, 0x28, 0x28],
    [0x30, 0x48, 0x50, 0x28, 0x10, 0x48, 0x48],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8],
    [0x20, 0x70, 0xA8, 0x20, 0xA8, 0x70, 0x20],
    [0x00, 0x20, 0x70, 0xA8, 0x20, 0x20, 0x20],
    [0x00, 0x20, 0x20, 0x20, 0xA8, 0x70, 0x20],
    [0x00, 0x20, 0x10, 0xF8, 0x10, 0x20, 0x00],
    [0x00, 0x20, 0x40, 0xF8, 0x40, 0x20, 0x00],
    [0x00, 0x80, 0x80, 0x80, 0xF8, 0x00, 0x00],
    [0x00, 0x50, 0xF8, 0xF8, 0x50, 0x00, 0x00],
    [0x00, 0x20, 0x20, 0x70, 0xF8, 0xF8, 0x00],
    [0x00, 0xF8, 0xF8, 0x70, 0x20, 0x20, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20],
    [0x50, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00],
    [0x50, 0x50, 0xF8, 0x50, 0xF8, 0x50, 0x50],
    [0x20, 0x78, 0xA0, 0x70, 0x28, 0xF0, 0x20],
    [0xC0, 0xC8, 0x10, 0x20, 0x40, 0x98, 0x18],
    [0x40, 0xA0, 0xA0, 0x40, 0xA8, 0x90, 0x68],
    [0x30, 0x30, 0x20, 0x40, 0x00, 0x00, 0x00],
    [0x10, 0x20, 0x40, 0x40, 0x40, 0x20, 0x10],
    [0x40, 0x20, 0x10, 0x10, 0x10, 0x20, 0x40],
    [0x20, 0xA8, 0x70, 0xF8, 0x70, 0xA8, 0x20],
    [0x00, 0x20, 0x20, 0xF8, 0x20, 0x20, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x20],
    [0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30],
    [0x00, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00],
    [0x70, 0x88, 0x98, 0xA8, 0xC8, 0x88, 0x70],
    [0x20, 0x60, 0x20, 0x20, 0x20, 0x20, 0x70],
    [0x70, 0x88, 0x08, 0x70, 0x80, 0x80, 0xF8],
    [0xF8, 0x08, 0x10, 0x30, 0x08, 0x88, 0x70],
    [0x10, 0x30, 0x50, 0x90, 0xF8, 0x10, 0x10],
    [0xF8, 0x80, 0xF0, 0x08, 0x08, 0x88, 0x70],
    [0x38, 0x40, 0x80, 0xF0, 0x88, 0x88, 0x70],
    [0xF8, 0x08, 0x08, 0x10, 0x20, 0x40, 0x80],
    [0x70, 0x88, 0x88, 0x70, 0x88, 0x88, 0x70],
    [0x70, 0x88, 0x88, 0x78, 0x08, 0x10, 0xE0],
    [0x00, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00],
    [0x00, 0x00, 0x20, 0x00, 0x20, 0x20, 0x40],
    [0x08, 0x10, 0x20, 0x40, 0x20, 0x10, 0x08],
    [0x00, 0x00, 0xF8, 0x00, 0xF8, 0x00, 0x00],
    [0x40, 0x20, 0x10, 0x08, 0x10, 0x20, 0x40],
    [0x70, 0x88, 0x08, 0x30, 0x20, 0x00, 0x20],
    [0x70, 0x88, 0xA8, 0xB8, 0xB0, 0x80, 0x78],
    [0x20, 0x50, 0x88, 0x88, 0xF8, 0x88, 0x88],
    [0xF0, 0x88, 0x88, 0xF0, 0x88, 0x88, 0xF0],
    [0x70, 0x88, 0x80, 0x80, 0x80, 0x88, 0x70],
    [0xF0, 0x88, 0x88, 0x88, 0x88, 0x88, 0xF0],
    [0xF8, 0x80, 0x80, 0xF0, 0x80, 0x80, 0xF8],
    [0xF8, 0x80, 0x80, 0xF0, 0x80, 0x80, 0x80],
    [0x78, 0x88, 0x80, 0x80, 0x98, 0x88, 0x78],
    [0x88, 0x88, 0x88, 0xF8, 0x88, 0x88, 0x88],
    [0x70, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70],
    [0x38, 0x10, 0x10, 0x10, 0x10, 0x90, 0x60],
    [0x88, 0x90, 0xA0, 0xC0, 0xA0, 0x90, 0x88],
    [0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xF8],
    [0x88, 0xD8, 0xA8, 0xA8, 0xA8, 0x88, 0x88],
    [0x88, 0x88, 0xC8, 0xA8, 0x98, 0x88, 0x88],
    [0x70, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70],
    [0xF0, 0x88, 0x88, 0xF0, 0x80, 0x80, 0x80],
    [0x70, 0x88, 0x88, 0x88, 0xA8, 0x90, 0x68],
    [0xF0, 0x88, 0x88, 0xF0, 0xA0, 0x90, 0x88],
    [0x70, 0x88, 0x80, 0x70, 0x08, 0x88, 0x70],
    [0xF8, 0xA8, 0x20, 0x20, 0x20, 0x20, 0x20],
    [0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70],
    [0x88, 0x88, 0x88, 0x88, 0x88, 0x50, 0x20],
    [0x88, 0x88, 0x88, 0xA8, 0xA8, 0xA8, 0x50],
    [0x88, 0x88, 0x50, 0x20, 0x50, 0x88, 0x88],
    [0x88, 0x88, 0x50, 0x20, 0x20, 0x20, 0x20],
    [0xF8, 0x08, 0x10, 0x70, 0x40, 0x80, 0xF8],
    [0x78, 0x40, 0x40, 0x40, 0x40, 0x40, 0x78],
    [0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x00],
    [0x78, 0x08, 0x08, 0x08, 0x08, 0x08, 0x78],
    [0x20, 0x50, 0x88, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8],
    [0x60, 0x60, 0x20, 0x10, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x60, 0x10, 0x70, 0x90, 0x78],
    [0x80, 0x80, 0xB0, 0xC8, 0x88, 0xC8, 0xB0],
    [0x00, 0x00, 0x70, 0x88, 0x80, 0x88, 0x70],
    [0x08, 0x08, 0x68, 0x98, 0x88, 0x98, 0x68],
    [0x00, 0x00, 0x70, 0x88, 0xF8, 0x80, 0x70],
    [0x10, 0x28, 0x20, 0x70, 0x20, 0x20, 0x20],
    [0x00, 0x00, 0x70, 0x98, 0x98, 0x68, 0x08],
    [0x80, 0x80, 0xB0, 0xC8, 0x88, 0x88, 0x88],
    [0x20, 0x00, 0x60, 0x20, 0x20, 0x20, 0x70],
    [0x10, 0x00, 0x10, 0x10, 0x10, 0x90, 0x60],
    [0x80, 0x80, 0x90, 0xA0, 0xC0, 0xA0, 0x90],
    [0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70],
    [0x00, 0x00, 0xD0, 0xA8, 0xA8, 0xA8, 0xA8],
    [0x00, 0x00, 0xB0, 0xC8, 0x88, 0x88, 0x88],
    [0x00, 0x00, 0x70, 0x88, 0x88, 0x88, 0x70],
    [0x00, 0x00, 0xB0, 0xC8, 0xC8, 0xB0, 0x80],
    [0x00, 0x00, 0x68, 0x98, 0x98, 0x68, 0x08],
    [0x00, 0x00, 0xB0, 0xC8, 0x80, 0x80, 0x80],
    [0x00, 0x00, 0x78, 0x80, 0x70, 0x08, 0xF0],
    [0x20, 0x20, 0xF8, 0x20, 0x20, 0x28, 0x10],
    [0x00, 0x00, 0x88, 0x88, 0x88, 0x98, 0x68],
    [0x00, 0x00, 0x88, 0x88, 0x88, 0x50, 0x20],
    [0x00, 0x00, 0x88, 0x88, 0xA8, 0xA8, 0x50],
    [0x00, 0x00, 0x88, 0x50, 0x20, 0x50, 0x88],
    [0x00, 0x00, 0x88, 0x88, 0x78, 0x08, 0x88],
    [0x00, 0x00, 0xF8, 0x10, 0x20, 0x40, 0xF8],
    [0x10, 0x20, 0x20, 0x40, 0x20, 0x20, 0x10],
    [0x20, 0x20, 0x20, 0x00, 0x20, 0x20, 0x20],
    [0x40, 0x20, 0x20, 0x10, 0x20, 0x20, 0x40],
    [0x40, 0xA8, 0x10, 0x00, 0x00, 0x00, 0x00],
    [0x20, 0x70, 0xD8, 0x88, 0x88, 0xF8, 0x00],
    [0x70, 0x88, 0x80, 0x80, 0x88, 0x70, 0x10],
    [0x00, 0x88, 0x00, 0x88, 0x88, 0x98, 0x68],
    [0x18, 0x00, 0x70, 0x88, 0xF8, 0x80, 0x78],
    [0xF8, 0x00, 0x60, 0x10, 0x70, 0x90, 0x78],
    [0x00, 0x88, 0x60, 0x10, 0x70, 0x90, 0x78],
    [0xC0, 0x00, 0x60, 0x10, 0x70, 0x90, 0x78],
    [0x30, 0x00, 0x60, 0x10, 0x70, 0x90, 0x78],
    [0x00, 0x78, 0xC0, 0xC0, 0x78, 0x10, 0x30],
    [0xF8, 0x00, 0x70, 0x88, 0xF8, 0x80, 0x78],
    [0x88, 0x00, 0x70, 0x88, 0xF8, 0x80, 0x78],
    [0xC0, 0x00, 0x70, 0x88, 0xF8, 0x80, 0x78],
    [0x28, 0x00, 0x30, 0x10, 0x10, 0x10, 0x38],
    [0x30, 0x48, 0x30, 0x10, 0x10, 0x10, 0x38],
    [0x60, 0x00, 0x30, 0x10, 0x10, 0x10, 0x38],
    [0xA8, 0x50, 0x88, 0x88, 0xF8, 0x88, 0x88],
    [0x20, 0x00, 0x20, 0x50, 0x88, 0xF8, 0x88],
    [0x30, 0x00, 0xF0, 0x80, 0xE0, 0x80, 0xF0],
    [0x00, 0x00, 0x78, 0x10, 0x78, 0x90, 0x78],
    [0x38, 0x50, 0x90, 0xF8, 0x90, 0x90, 0x98],
    [0x70, 0x88, 0x00, 0x70, 0x88, 0x88, 0x70],
    [0x00, 0x88, 0x70, 0x88, 0x88, 0x88, 0x70],
    [0x00, 0xC0, 0x00, 0x70, 0x88, 0x88, 0x70],
    [0x70, 0x88, 0x00, 0x88, 0x88, 0x98, 0x68],
    [0x00, 0xC0, 0x00, 0x88, 0x88, 0x98, 0x68],
    [0x48, 0x00, 0x48, 0x48, 0x48, 0x38, 0x08],
    [0x88, 0x70, 0x88, 0x88, 0x88, 0x88, 0x70],
    [0x88, 0x00, 0x88, 0x88, 0x88, 0x88, 0x70],
    [0x20, 0x20, 0xF8, 0xA0, 0xA0, 0xF8, 0x20],
    [0x30, 0x58, 0x48, 0xE0, 0x40, 0x48, 0xF8],
    [0xD8, 0xD8, 0x70, 0xF8, 0x20, 0xF8, 0x20],
    [0xE0, 0x90, 0x90, 0xE0, 0x90, 0xB8, 0x90],
    [0x18, 0x28, 0x20, 0x70, 0x20, 0x20, 0xA0],
    [0x18, 0x00, 0x60, 0x10, 0x70, 0x90, 0x78],
    [0x18, 0x00, 0x30, 0x10, 0x10, 0x10, 0x38],
    [0x00, 0x18, 0x00, 0x70, 0x88, 0x88, 0x70],
    [0x00, 0x18, 0x00, 0x88, 0x88, 0x98, 0x68],
    [0x00, 0x78, 0x00, 0x70, 0x48, 0x48, 0x48],
    [0xF8, 0x00, 0xC8, 0xE8, 0xB8, 0x98, 0x88],
    [0x70, 0x90, 0x90, 0x78, 0x00, 0xF8, 0x00],
    [0x70, 0x88, 0x88, 0x70, 0x00, 0xF8, 0x00],
    [0x20, 0x00, 0x20, 0x60, 0x80, 0x88, 0x70],
    [0x00, 0x00, 0x00, 0xF8, 0x80, 0x80, 0x00],
    [0x00, 0x00, 0x00, 0xF8, 0x08, 0x08, 0x00],
    [0x80, 0x88, 0x90, 0xB8, 0x48, 0x98, 0x20],
    [0x80, 0x88, 0x90, 0xA8, 0x58, 0xB8, 0x08],
    [0x20, 0x20, 0x00, 0x20, 0x20, 0x20, 0x20],
    [0x00, 0x28, 0x50, 0xA0, 0x50, 0x28, 0x00],
    [0x00, 0xA0, 0x50, 0x28, 0x50, 0xA0, 0x00],
    [0x20, 0x88, 0x20, 0x88, 0x20, 0x88, 0x20],
    [0x50, 0xA8, 0x50, 0xA8, 0x50, 0xA8, 0x50],
    [0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10],
    [0x10, 0x10, 0x10, 0x10, 0xF0, 0x10, 0x10],
    [0x10, 0x10, 0xF0, 0x10, 0xF0, 0x10, 0x10],
    [0x28, 0x28, 0x28, 0x28, 0xE8, 0x28, 0x28],
    [0x00, 0x00, 0x00, 0x00, 0xF8, 0x28, 0x28],
    [0x00, 0x00, 0xF0, 0x10, 0xF0, 0x10, 0x10],
    [0x28, 0x28, 0xE8, 0x08, 0xE8, 0x28, 0x28],
    [0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28],
    [0x00, 0x00, 0xF8, 0x08, 0xE8, 0x28, 0x28],
    [0x28, 0x28, 0xE8, 0x08, 0xF8, 0x00, 0x00],
    [0x28, 0x28, 0x28, 0x28, 0xF8, 0x00, 0x00],
    [0x10, 0x10, 0xF0, 0x10, 0xF0, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0xF0, 0x10, 0x10],
    [0x10, 0x10, 0x10, 0x10, 0x18, 0x00, 0x00],
    [0x10, 0x10, 0x10, 0x10, 0xF8, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0xF8, 0x10, 0x10],
    [0x10, 0x10, 0x10, 0x10, 0x18, 0x10, 0x10],
    [0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00],
    [0x10, 0x10, 0x10, 0x10, 0xF8, 0x10, 0x10],
    [0x10, 0x10, 0x18, 0x10, 0x18, 0x10, 0x10],
    [0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28],
    [0x28, 0x28, 0x28, 0x20, 0x38, 0x00, 0x00],
    [0x00, 0x00, 0x38, 0x20, 0x28, 0x28, 0x28],
    [0x28, 0x28, 0xE8, 0x00, 0xF8, 0x00, 0x00],
    [0x00, 0x00, 0xF8, 0x00, 0xE8, 0x28, 0x28],
    [0x28, 0x28, 0x28, 0x20, 0x28, 0x28, 0x28],
    [0x00, 0x00, 0xF8, 0x00, 0xF8, 0x00, 0x00],
    [0x28, 0x28, 0xE8, 0x00, 0xE8, 0x28, 0x28],
    [0x10, 0x10, 0xF8, 0x00, 0xF8, 0x00, 0x00],
    [0x28, 0x28, 0x28, 0x28, 0xF8, 0x00, 0x00],
    [0x00, 0x00, 0xF8, 0x00, 0xF8, 0x10, 0x10],
    [0x00, 0x00, 0x00, 0x00, 0xF8, 0x28, 0x28],
    [0x28, 0x28, 0x28, 0x28, 0x38, 0x00, 0x00],
    [0x10, 0x10, 0x18, 0x10, 0x18, 0x00, 0x00],
    [0x00, 0x00, 0x18, 0x10, 0x18, 0x10, 0x10],
    [0x00, 0x00, 0x00, 0x00, 0x38, 0x28, 0x28],
    [0x28, 0x28, 0x28, 0x28, 0xF8, 0x28, 0x28],
    [0x10, 0x10, 0xF8, 0x10, 0xF8, 0x10, 0x10],
    [0x10, 0x10, 0x10, 0x10, 0xF0, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x18, 0x10, 0x10],
    [0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8],
    [0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0xF8],
    [0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0],
    [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18],
    [0xF8, 0xF8, 0xF8, 0xF8, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x68, 0x90, 0x90, 0x90, 0x68],
    [0x00, 0x70, 0x88, 0xF0, 0x88, 0x88, 0xF0],
    [0x00, 0xF8, 0x98, 0x80, 0x80, 0x80, 0x80],
    [0x00, 0xF8, 0x50, 0x50, 0x50, 0x50, 0x50],
    [0xF8, 0x88, 0x40, 0x20, 0x40, 0x88, 0xF8],
    [0x00, 0x00, 0x78, 0x90, 0x90, 0x90, 0x60],
    [0x00, 0x50, 0x50, 0x50, 0x50, 0x68, 0xC0],
    [0x00, 0xF8, 0xA0, 0x20, 0x20, 0x20, 0x20],
    [0xF8, 0x20, 0x70, 0x88, 0x88, 0x70, 0x20],
    [0x20, 0x50, 0x88, 0xF8, 0x88, 0x50, 0x20],
    [0x20, 0x50, 0x88, 0x88, 0x50, 0x50, 0xD8],
    [0x30, 0x40, 0x30, 0x70, 0x88, 0x88, 0x70],
    [0x00, 0x00, 0x00, 0x70, 0xA8, 0xA8, 0x70],
    [0x08, 0x70, 0x98, 0xA8, 0xA8, 0xC8, 0x70],
    [0x70, 0x80, 0x80, 0xF0, 0x80, 0x80, 0x70],
    [0x70, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88],
    [0x00, 0xF8, 0x00, 0xF8, 0x00, 0xF8, 0x00],
    [0x20, 0x20, 0xF8, 0x20, 0x20, 0x00, 0xF8],
    [0x40, 0x20, 0x10, 0x20, 0x40, 0x00, 0xF8],
    [0x10, 0x20, 0x40, 0x20, 0x10, 0x00, 0xF8],
    [0x38, 0x28, 0x20, 0x20, 0x20, 0x20, 0x20],
    [0x20, 0x20, 0x20, 0x20, 0x20, 0xA0, 0xA0],
    [0x30, 0x30, 0x00, 0xF8, 0x00, 0x30, 0x30],
    [0x00, 0xE8, 0xB8, 0x00, 0xE8, 0xB8, 0x00],
    [0x70, 0xD8, 0xD8, 0x70, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00],
    [0x38, 0x20, 0x20, 0x20, 0xA0, 0xA0, 0x60],
    [0x70, 0x48, 0x48, 0x48, 0x48, 0x00, 0x00],
    [0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00],
    [0x00, 0x00, 0x78, 0x78, 0x78, 0x78, 0x00],
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x08, 0x28, 0x08, 0x28, 0x00, 0x78, 0x08],
]

oled_font_prerendered = []
for char in oled_font_data:
    v = [0 for i in range(5)]

    for j, d in enumerate(char):
        for k in range(5):
            if (d << k) & (1 << 7):
                v[k] |= (1 << j)

    oled_font_prerendered.append(v)


def format_hex(v, zero_padding=4):
    return '%s0x%0*x' % (int(v) < 0 and '-' or '', zero_padding, abs(int(v)))


def header():
    yield '/*'
    yield ' * db-synth: A MIDI-controlled mono-voice digital synthesizer built on top of the'
    yield ' *           AVR DB microcontroller series.'
    yield ' *'
    yield ' * SPDX-FileCopyrightText: 2022 Rafael G. Martins <rafael@rafaelmartins.eng.br>'
    yield ' * SPDX-License-Identifier: BSD-3-Clause'
    yield ' */'
    yield ''
    yield '// this file was generated by generate.py. do not edit!'
    yield ''
    yield '#pragma once'


def header_oled_font():
    yield '/********************************************************************************'
    yield '* Copyright (c) 2012, Majenko Technologies'
    yield '* Copyright (c) 2016, zaltora'
    yield '* Copyright (c) 2019, Rafael G. Martins <rafael@rafaelmartins.eng.br>'
    yield '* All rights reserved.'
    yield '*'
    yield '* Redistribution and use in source and binary forms, with or without'
    yield '* modification, are permitted provided that the following conditions are met:'
    yield '*'
    yield '* 1. Redistributions of source code must retain the above copyright notice, this'
    yield '*    list of conditions and the following disclaimer.'
    yield '* 2. Redistributions in binary form must reproduce the above copyright notice,'
    yield '*    this list of conditions and the following disclaimer in the documentation'
    yield '*    and/or other materials provided with the distribution.'
    yield '*'
    yield '* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND'
    yield '* ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED'
    yield '* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE'
    yield '* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR'
    yield '* ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES'
    yield '* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;'
    yield '* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND'
    yield '* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT'
    yield '* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS'
    yield '* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'
    yield '*'
    yield '* The views and conclusions contained in the software and documentation are those'
    yield '* of the authors and should not be interpreted as representing official policies,'
    yield '* either expressed or implied, of the FreeBSD Project.'
    yield '********************************************************************************/'
    yield ''
    yield '// this is glcd 5x7 font, modified from the version of it available at:'
    yield '// https://github.com/SuperHouse/esp-open-rtos/blob/7432c01/extras/fonts/data/font_glcd_5x7.h'
    yield ''
    yield '// this file was generated by generate.py. do not edit!'
    yield ''
    yield '#pragma once'


def dump_headers(headers, system=True):
    if headers:
        yield ''

    for header in headers:
        yield '#include %s%s%s' % (system and '<' or '"', header, system and '>' or '"')


def dump_macros(items):
    if items:
        yield ''

    for item in items:
        yield '#define %s %s' % (item, items[item])


def dump_notes():
    yield ''
    yield 'static const phase_t notes[] = {'

    for f in note_frequencies:
        step = waveform_samples_per_cycle / (audio_sample_rate / f)
        yield '    {%s},' % format_hex(step * (1 << 16), 8)

    yield '};'


def dump_wavetables():
    for var, array in wavetables.items():
        if len(array) == 0:
            continue

        yield ''

        if not isinstance(array[0], list):
            yield 'static const int16_t %s_wavetable[%s] PROGMEM = {' % \
                (var, format_hex(len(array)))
            for i in range(0, len(array) // 8):
                yield '    %s,' % ', '.join([format_hex(j)
                                             for j in array[i * 8: (i + 1) * 8]])
            yield '};'
            continue

        yield 'static const int16_t %s_wavetables[%d][%s] PROGMEM = {' % \
            (var, len(array), format_hex(len(array[0])))
        for value in array:
            yield '    {'
            for i in range(0, len(value) // 8):
                yield '        %s,' % ', '.join([format_hex(j)
                                                 for j in value[i * 8: (i + 1) * 8]])
            yield '    },'
        yield '};'


def dump_adsr_curves():
    for var, value in adsr_curves.items():
        yield ''
        yield 'static const uint8_t %s_curve[] PROGMEM = {' % var
        for i in range(0, len(value) // 8):
            yield '    %s,' % ', '.join([format_hex(j, 2)
                                         for j in value[i * 8: (i + 1) * 8]])
        yield '};'


def dump_adsr_times():
    yield ''
    yield 'static const struct {'
    yield '    const char *description;'
    yield '    phase_t step;'
    yield '} times[] = {'

    for t in adsr_times:
        desc = ('%.2f s' % (t / 1000)) if t > 1000 else ('%d ms' % t)
        step = (adsr_samples_per_cycle * 1000) / (t * audio_sample_rate)
        yield '    {'
        yield '        .description = "%s",' % desc
        yield '        .step        = {%s},' % format_hex(round(step * (1 << 16)), 8)
        yield '    },'

    yield '};'


def dump_oled_font():
    yield ''
    yield 'static const uint8_t oled_font[%d][%d] PROGMEM = {' % (len(oled_font_prerendered), oled_font_width)

    for char in oled_font_prerendered:
        yield '    {%s},' % ', '.join([format_hex(j, 2) for j in char])

    yield '};'


generators = {
    'main-data.h': itertools.chain(
        header(),
        dump_macros({
            'waveform_amplitude': format_hex(waveform_amplitude),
        }),
    ),
    'adsr-data.h': itertools.chain(
        header(),
        dump_headers(['avr/pgmspace.h', 'stdint.h']),
        dump_headers(['phase.h'], False),
        dump_macros({
            'adsr_amplitude': format_hex(adsr_amplitude, 2),
            'adsr_samples_per_cycle': format_hex(adsr_samples_per_cycle),
        }),
        dump_adsr_curves(),
        dump_adsr_times(),
    ),
    'oled-data.h': itertools.chain(
        header(),
        dump_headers(['oled-font.h'], False),
        dump_macros({
            'oled_screen_width': oled_screen_width,
            'oled_screen_height': oled_screen_height,
            'oled_chars_per_line': oled_chars_per_line,
            'oled_lines': oled_lines,
        }),
    ),
    'oled-font.h': itertools.chain(
        header_oled_font(),
        dump_headers(['avr/pgmspace.h', 'stdint.h']),
        dump_macros({
            'oled_font_width': oled_font_width,
            'oled_font_height': oled_font_height,
        }),
        dump_oled_font(),
    ),
    'oscillator-data.h': itertools.chain(
        header(),
        dump_headers(['avr/pgmspace.h', 'stdint.h']),
        dump_headers(['phase.h'], False),
        dump_macros({
            'waveform_samples_per_cycle': format_hex(waveform_samples_per_cycle),
            'wavetable_octaves': wavetable_octaves,
            'notes_last': len(note_frequencies) - 1,
        }),
        dump_wavetables(),
        dump_notes(),
    ),
}


if __name__ == '__main__':
    rootdir = os.path.dirname(os.path.abspath(__file__))
    for key in generators:
        print('generating %s ...' % key)

        with open(os.path.join(rootdir, key), 'w') as fp:
            for l in generators[key]:
                print(l, file=fp)
